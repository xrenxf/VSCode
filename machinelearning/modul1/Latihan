{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPMphEcFSP10XoRyeqsPJfn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"bZHjMKqMRUc8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727334913253,"user_tz":-420,"elapsed":482,"user":{"displayName":"KRISTIN WULANDARI","userId":"11188637252798690573"}},"outputId":"d8ec9973-f492-449c-cc17-78529070495c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.1.4)\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.17.0)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.5.2)\n","Requirement already satisfied: numpy<2,>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.6.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: h5py>=3.10.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.11.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.4.1)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.1)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.32.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (71.0.4)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.4.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.12.2)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.64.1)\n","Requirement already satisfied: tensorboard<2.18,>=2.17 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.17.0)\n","Requirement already satisfied: keras>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.4.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.37.1)\n","Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.44.0)\n","Requirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (13.8.1)\n","Requirement already satisfied: namex in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.0.8)\n","Requirement already satisfied: optree in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.12.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2024.8.30)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.7)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.0.4)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.18,>=2.17->tensorflow) (2.1.5)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (2.18.0)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.2.0->tensorflow) (0.1.2)\n"]}],"source":["!pip install pandas tensorflow scikit-learn"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler, LabelEncoder\n","from sklearn.metrics import classification_report, confusion_matrix"],"metadata":{"id":"-PvOTT9sfe9x","executionInfo":{"status":"ok","timestamp":1727334928653,"user_tz":-420,"elapsed":5131,"user":{"displayName":"KRISTIN WULANDARI","userId":"11188637252798690573"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","df = pd.read_csv('/content/drive/MyDrive/Study/Machine Learning/Modul 1/obesity_data.csv')\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":441},"id":"UfRqA0ebgjQ6","executionInfo":{"status":"ok","timestamp":1727335069297,"user_tz":-420,"elapsed":46920,"user":{"displayName":"KRISTIN WULANDARI","userId":"11188637252798690573"}},"outputId":"b295d939-c97f-46ff-8229-86067a997c07"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]},{"output_type":"execute_result","data":{"text/plain":["     Age  Gender      Height     Weight        BMI  PhysicalActivityLevel  \\\n","0     56    Male  173.575262  71.982051  23.891783                      4   \n","1     69    Male  164.127306  89.959256  33.395209                      2   \n","2     46  Female  168.072202  72.930629  25.817737                      4   \n","3     32    Male  168.459633  84.886912  29.912247                      3   \n","4     60    Male  183.568568  69.038945  20.487903                      3   \n","..   ...     ...         ...        ...        ...                    ...   \n","995   18    Male  155.588674  64.103182  26.480345                      4   \n","996   35  Female  165.076490  97.639771  35.830783                      1   \n","997   49  Female  156.570956  78.804284  32.146036                      1   \n","998   64    Male  164.192222  57.978115  21.505965                      4   \n","999   66  Female  178.537130  74.962164  23.517168                      1   \n","\n","    ObesityCategory  \n","0     Normal weight  \n","1             Obese  \n","2        Overweight  \n","3        Overweight  \n","4     Normal weight  \n","..              ...  \n","995      Overweight  \n","996           Obese  \n","997           Obese  \n","998   Normal weight  \n","999   Normal weight  \n","\n","[1000 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-7271c137-2e36-44d2-954e-2a567ab1a475\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>Gender</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>BMI</th>\n","      <th>PhysicalActivityLevel</th>\n","      <th>ObesityCategory</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>56</td>\n","      <td>Male</td>\n","      <td>173.575262</td>\n","      <td>71.982051</td>\n","      <td>23.891783</td>\n","      <td>4</td>\n","      <td>Normal weight</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>69</td>\n","      <td>Male</td>\n","      <td>164.127306</td>\n","      <td>89.959256</td>\n","      <td>33.395209</td>\n","      <td>2</td>\n","      <td>Obese</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>46</td>\n","      <td>Female</td>\n","      <td>168.072202</td>\n","      <td>72.930629</td>\n","      <td>25.817737</td>\n","      <td>4</td>\n","      <td>Overweight</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>32</td>\n","      <td>Male</td>\n","      <td>168.459633</td>\n","      <td>84.886912</td>\n","      <td>29.912247</td>\n","      <td>3</td>\n","      <td>Overweight</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>60</td>\n","      <td>Male</td>\n","      <td>183.568568</td>\n","      <td>69.038945</td>\n","      <td>20.487903</td>\n","      <td>3</td>\n","      <td>Normal weight</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>995</th>\n","      <td>18</td>\n","      <td>Male</td>\n","      <td>155.588674</td>\n","      <td>64.103182</td>\n","      <td>26.480345</td>\n","      <td>4</td>\n","      <td>Overweight</td>\n","    </tr>\n","    <tr>\n","      <th>996</th>\n","      <td>35</td>\n","      <td>Female</td>\n","      <td>165.076490</td>\n","      <td>97.639771</td>\n","      <td>35.830783</td>\n","      <td>1</td>\n","      <td>Obese</td>\n","    </tr>\n","    <tr>\n","      <th>997</th>\n","      <td>49</td>\n","      <td>Female</td>\n","      <td>156.570956</td>\n","      <td>78.804284</td>\n","      <td>32.146036</td>\n","      <td>1</td>\n","      <td>Obese</td>\n","    </tr>\n","    <tr>\n","      <th>998</th>\n","      <td>64</td>\n","      <td>Male</td>\n","      <td>164.192222</td>\n","      <td>57.978115</td>\n","      <td>21.505965</td>\n","      <td>4</td>\n","      <td>Normal weight</td>\n","    </tr>\n","    <tr>\n","      <th>999</th>\n","      <td>66</td>\n","      <td>Female</td>\n","      <td>178.537130</td>\n","      <td>74.962164</td>\n","      <td>23.517168</td>\n","      <td>1</td>\n","      <td>Normal weight</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1000 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7271c137-2e36-44d2-954e-2a567ab1a475')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7271c137-2e36-44d2-954e-2a567ab1a475 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7271c137-2e36-44d2-954e-2a567ab1a475');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a8406532-18bc-48e3-9f2a-8b9b80a131cd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a8406532-18bc-48e3-9f2a-8b9b80a131cd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a8406532-18bc-48e3-9f2a-8b9b80a131cd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_092f2716-d2f6-4aad-acdc-c41f6a541fdd\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_092f2716-d2f6-4aad-acdc-c41f6a541fdd button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18,\n        \"min\": 18,\n        \"max\": 79,\n        \"num_unique_values\": 62,\n        \"samples\": [\n          51,\n          18,\n          56\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.309970795149901,\n        \"min\": 136.11571917343608,\n        \"max\": 201.419669772878,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          196.29212631300277,\n          164.2091969152057\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.50984931594738,\n        \"min\": 26.06572952948354,\n        \"max\": 118.90736621037136,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          97.63718566850817,\n          75.96708177625706\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BMI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.193912442573649,\n        \"min\": 8.470571512124117,\n        \"max\": 50.79189837285713,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          25.3401682237867,\n          28.17283095202327\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PhysicalActivityLevel\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ObesityCategory\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Obese\",\n          \"Underweight\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sgVUgDNkhwRq","executionInfo":{"status":"ok","timestamp":1727335074555,"user_tz":-420,"elapsed":708,"user":{"displayName":"KRISTIN WULANDARI","userId":"11188637252798690573"}},"outputId":"1ba33503-9315-4bcc-881c-2fd9a2f9ad2e"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1000 entries, 0 to 999\n","Data columns (total 7 columns):\n"," #   Column                 Non-Null Count  Dtype  \n","---  ------                 --------------  -----  \n"," 0   Age                    1000 non-null   int64  \n"," 1   Gender                 1000 non-null   object \n"," 2   Height                 1000 non-null   float64\n"," 3   Weight                 1000 non-null   float64\n"," 4   BMI                    1000 non-null   float64\n"," 5   PhysicalActivityLevel  1000 non-null   int64  \n"," 6   ObesityCategory        1000 non-null   object \n","dtypes: float64(3), int64(2), object(2)\n","memory usage: 54.8+ KB\n"]}]},{"cell_type":"code","source":["X = df.drop(columns=['ObesityCategory'])\n","y = df['ObesityCategory']\n","\n","# Encode\n","label_encoder = LabelEncoder()\n","X['Gender'] = label_encoder.fit_transform(X['Gender'])\n","y_encoded = label_encoder.fit_transform(y)\n","\n","# Normalize\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","# Split\n","X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_encoded, test_size=0.2, random_state=42)"],"metadata":{"id":"AKf-D6TygY-f","executionInfo":{"status":"ok","timestamp":1727335327780,"user_tz":-420,"elapsed":623,"user":{"displayName":"KRISTIN WULANDARI","userId":"11188637252798690573"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":["Neural Network Model (FNN)"],"metadata":{"id":"Y5CgtHxhi3Kw"}},{"cell_type":"code","source":["model = tf.keras.models.Sequential([\n","    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n","    tf.keras.layers.Dense(32, activation='relu'),\n","    tf.keras.layers.Dense(16, activation='relu'),\n","    tf.keras.layers.Dense(4, activation='softmax')\n","])\n","\n","model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bxGzZ507hAyP","executionInfo":{"status":"ok","timestamp":1727335334820,"user_tz":-420,"elapsed":475,"user":{"displayName":"KRISTIN WULANDARI","userId":"11188637252798690573"}},"outputId":"2aae018a-0f12-45bb-9a92-753ec729026c"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]}]},{"cell_type":"markdown","source":["Train Model"],"metadata":{"id":"oOtiA1GYjD9C"}},{"cell_type":"code","source":["history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nq3omSu6jBlz","executionInfo":{"status":"ok","timestamp":1727335344024,"user_tz":-420,"elapsed":5655,"user":{"displayName":"KRISTIN WULANDARI","userId":"11188637252798690573"}},"outputId":"575abe70-ee8b-40a0-fbe4-7545ef2dc906"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 27ms/step - accuracy: 0.3164 - loss: 1.3155 - val_accuracy: 0.6375 - val_loss: 1.1441\n","Epoch 2/10\n","\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.6457 - loss: 1.1151 - val_accuracy: 0.6625 - val_loss: 0.9839\n","Epoch 3/10\n","\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.6553 - loss: 0.9768 - val_accuracy: 0.7250 - val_loss: 0.8446\n","Epoch 4/10\n","\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - accuracy: 0.7654 - loss: 0.8094 - val_accuracy: 0.7937 - val_loss: 0.7023\n","Epoch 5/10\n","\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7869 - loss: 0.6674 - val_accuracy: 0.8313 - val_loss: 0.5699\n","Epoch 6/10\n","\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.8692 - loss: 0.5428 - val_accuracy: 0.9187 - val_loss: 0.4572\n","Epoch 7/10\n","\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9135 - loss: 0.4138 - val_accuracy: 0.9312 - val_loss: 0.3719\n","Epoch 8/10\n","\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9155 - loss: 0.3389 - val_accuracy: 0.9187 - val_loss: 0.3071\n","Epoch 9/10\n","\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9447 - loss: 0.2728 - val_accuracy: 0.9125 - val_loss: 0.2742\n","Epoch 10/10\n","\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.9342 - loss: 0.2365 - val_accuracy: 0.9312 - val_loss: 0.2601\n"]}]},{"cell_type":"markdown","source":["Evaluation"],"metadata":{"id":"QXaelYQqjO9T"}},{"cell_type":"code","source":["loss, accuracy = model.evaluate(X_test, y_test)\n","print(f'Test Accuracy: {accuracy * 100:.2f}%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NB167EuyjORD","executionInfo":{"status":"ok","timestamp":1727335350735,"user_tz":-420,"elapsed":532,"user":{"displayName":"KRISTIN WULANDARI","userId":"11188637252798690573"}},"outputId":"c882b0b6-a585-42e2-eb0e-8863ff7072e5"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9205 - loss: 0.2699  \n","Test Accuracy: 91.50%\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Plot training & validation accuracy values\n","plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","plt.title('Model accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend(['Train', 'Validation'], loc='upper left')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"mI6RqHvcNwPf","executionInfo":{"status":"ok","timestamp":1727335637435,"user_tz":-420,"elapsed":4723,"user":{"displayName":"KRISTIN WULANDARI","userId":"11188637252798690573"}},"outputId":"adbbc3c7-3a96-443f-dad3-a818458c1422"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title('Model loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend(['Train', 'Validation'], loc='upper left')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"eZ32mWHFPBDZ","executionInfo":{"status":"ok","timestamp":1727335775967,"user_tz":-420,"elapsed":1899,"user":{"displayName":"KRISTIN WULANDARI","userId":"11188637252798690573"}},"outputId":"6674c4b8-aa75-4280-e00e-840a2ba517dd"},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Classification"],"metadata":{"id":"pveB8St-jUy1"}},{"cell_type":"code","source":["y_pred = np.argmax(model.predict(X_test), axis=1)\n","print(\"Classification Report:\\n\", classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XWUiPYV9jS95","executionInfo":{"status":"ok","timestamp":1727335784220,"user_tz":-420,"elapsed":632,"user":{"displayName":"KRISTIN WULANDARI","userId":"11188637252798690573"}},"outputId":"8c0d5070-4dea-4f2e-f1f7-268cf275ea53"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.93      0.92      0.92        72\n","           1       0.86      0.97      0.91        32\n","           2       0.95      0.91      0.93        65\n","           3       0.87      0.87      0.87        31\n","\n","    accuracy                           0.92       200\n","   macro avg       0.90      0.92      0.91       200\n","weighted avg       0.92      0.92      0.92       200\n","\n"]}]},{"cell_type":"markdown","source":["Confusion Matrix"],"metadata":{"id":"K3AY-i56joi_"}},{"cell_type":"code","source":["conf_matrix = confusion_matrix(y_test, y_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mAIGc6qqjZr-","executionInfo":{"status":"ok","timestamp":1727335790863,"user_tz":-420,"elapsed":721,"user":{"displayName":"KRISTIN WULANDARI","userId":"11188637252798690573"}},"outputId":"ea908378-0045-4639-ea62-bbe394172b65"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n"," [[66  0  2  4]\n"," [ 0 31  1  0]\n"," [ 1  5 59  0]\n"," [ 4  0  0 27]]\n"]}]}]}